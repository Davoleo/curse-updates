import {Snowflake} from "discord.js";
import {dbclient} from "../data/dataHandler.js";
import GameTag from "../model/GameTag.js";

export default class UpdatesService {

    private static updateConfigs = dbclient.announcementsConfig;

    static getAllServerUpdateConfigs(serverId: Snowflake) {
        return this.updateConfigs.findMany({
            where: {
                serverId: serverId
            }
        });
    }

    static getAllConfigIds(serverId: Snowflake) {
        return this.updateConfigs.findMany({
            where: {
                serverId: serverId
            },
            select: {
                id: true
            }
        });
    }

    static async addReportTemplate(serverId: Snowflake, serverName: string, channel: string | undefined, message: string | undefined)  {
        const max = await this.updateConfigs.aggregate({
            _max: {
                id: true,
            },
            where: {
                serverId: serverId,
            }
        });
        const newId = max._max.id ? max._max.id+1 : 1;

        return this.updateConfigs.create({
            data: {
                server: {
                    connectOrCreate: {
                        where: {
                            id: serverId
                        },
                        create: {
                            id: serverId,
                            serverName: serverName
                        }
                    }
                },
                id: newId,
                channel: channel,
                message: message
            }
        });
    }

    static async removeReportTemplate(serverId: Snowflake, configId: number) {
        return this.updateConfigs.delete({
            where: {
                id_serverId: {
                    serverId: serverId,
                    id: configId,
                }
            }
        });
    }

    static async clearReportTemplates(serverId: Snowflake) {
        return this.updateConfigs.deleteMany({
            where: {
                serverId: serverId,
            }
        });
    }

    /**
     * Changes the updates channel to another unique reference
     * @param serverId snowflake of the server
     * @param configId of the update config [incremental & autogenerated]
     * @param channel discord snowflake
     */
    static async editReportChannel(serverId: Snowflake, configId: number, channel: Snowflake | undefined) {
        await this.updateConfigs.update({
            where: {
                id_serverId: {
                    serverId: serverId,
                    id: configId
                }
            },
            data: { channel: channel }
        })
    }

    static async editReportMessage(serverId: Snowflake, configId: number, message: string | undefined) {
        await this.updateConfigs.update({
            where: {
                id_serverId: {
                    id: configId,
                    serverId: serverId,
                }
            },
            data: { message: message }
        })
    }

    static async setTagsFilter(serverId: Snowflake, configId: number, tags: GameTag[] | undefined) {
        await this.updateConfigs.update({
            where: {
                id_serverId: {
                    serverId: serverId,
                    id: configId,
                }
            },
            data: { tagsFilter: tags?.map(tag => tag.join()).join('|') }
        })
    }

    static async getFilters(serverId: Snowflake, id: number): Promise<{ tags: GameTag[], projects: number[] }> {
        const unparsedFilters = await this.getFilterStrings(serverId, id);

        const tags = unparsedFilters.tags ? unparsedFilters.tags.split('|').map(stag => GameTag.fromString(stag)) : [];
        const projects = unparsedFilters.projects ? unparsedFilters.projects.split('|').map(sProject => Number(sProject)) : [];
        return { tags: tags, projects: projects }
    }

    static async getFilterStrings(serverId: Snowflake, configId: number): Promise<{tags: string|null, projects: string|null}> {
        const filters = (
            await this.updateConfigs.findUniqueOrThrow({
                where: {
                    id_serverId: {
                        serverId: serverId,
                        id: configId,
                    }
                },
                select: {
                    tagsFilter: true,
                    projectsFilter: true
                }
            })
        );

        return { tags: filters.tagsFilter, projects: filters.projectsFilter }
    }

    static async setProjectsFilter(serverId: Snowflake, configId: number, projectIds: number[]) {
        await this.updateConfigs.update({
                where: {
                    id_serverId: {
                        serverId: serverId,
                        id: configId,
                    }
                },
            data: { projectsFilter: projectIds.join('|') }
        })
    }

}