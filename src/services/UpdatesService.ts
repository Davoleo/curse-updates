import {Snowflake} from "discord.js";
import {dbclient} from "../data/dataHandler";
import GameTag from "../model/GameTag";

export default class UpdatesService {

    private static updateConfigs = dbclient.announcementsConfig;

    static async getAllServerUpdateConfigs(serverId: Snowflake) {
        this.updateConfigs.findMany({
            where: {
                serverId: serverId
            }
        })
    }
    
    static addReportTemplate(serverId: Snowflake, channel: string | undefined, message: string | undefined): void {
        this.updateConfigs.create({data: {
            serverId: serverId,
            channel: channel,
            message: message
        }});
    }

    static removeReportTemplate(id: number): void {
        this.updateConfigs.delete({where: {
            id: id
        }});
    }

    /**
     * Changes the updates channel to another unique reference
     * @param id of the update config [incremental & autogenerated]
     * @param channel discord snowflake
     * @throws {RecordNotFound} when config  id doesn't exist
     */
    static editReportChannel(id: number, channel: Snowflake | undefined): void {
        this.updateConfigs.update({
            where: { id: id },
            data: { channel: channel }
        })
    }

    static editReportMessage(id: number, message: string | undefined): void {
        this.updateConfigs.update({
            where: { id: id },
            data: { message: message }
        })
    }

    static setTagsFilter(id: number, tags: GameTag[] | undefined): void {
        this.updateConfigs.update({
            where: { id: id },
            data: { tagsFilter: tags?.map(tag => tag.join()).join('|') }
        })
    }

    static async getTagsFilter(id: number): Promise<GameTag[]> {
        const tags = (
            await this.updateConfigs.findUniqueOrThrow({
                where: { id: id },
                select: { tagsFilter: true }
            })
        ).tagsFilter;

        return tags ? tags.split('|').map(stringTag => GameTag.fromString(stringTag)) : [];
    }

    static setProjectsFilter(id: number, projectIds: number[]): void {
        this.updateConfigs.update({
            where: { id: id },
            data: { projectsFilter: projectIds.join('|') }
        })
    }

    static async getProjectsFilter(id: number): Promise<number[]> {
        const tags = (
            await this.updateConfigs.findUniqueOrThrow({
                where: { id: id },
                select: { projectsFilter: true }
            })
        ).projectsFilter;

        return tags ? tags.split('|').map(tag => Number(tag)) : [];
    }

}